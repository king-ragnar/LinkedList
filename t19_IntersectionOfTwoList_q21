class Node: 
    def __init__(self, data): 
        self.data = data 
        self.next = None
  
class LinkedList: 
    def __init__(self): 
        self.head = None
  
    # Function to add a node  
    # at the beginning of Linked List 
    def push(self, data): 
        new_node = Node(data) 
        new_node.next = self.head 
        self.head = new_node 
          
    # Function to print nodes in a 
    # given linked list 
    def printList(self): 
        tmp = self.head 
        while tmp is not None: 
            print(tmp.data, end=" ") 
            tmp = tmp.next
        print() 
        

class Intersect:
    def Intersect(self,a,b):
        l = []
        tmp = a.head 
        tmp1 = b.head
        while tmp is not None: 
            l.append(tmp.data) 
            tmp = tmp.next
        
        while tmp1 is not None:
            l.append(tmp1.data)
            tmp1 = tmp1.next
        
        l.sort()
        s=[]
        print(l)
        for i in range(0,len(l)-1):
            if l[i] == l[i+1]:
                s.append(l[i])
        return s 
            
            
        
# Driver Code 
if __name__ == '__main__': 
    llist = LinkedList() 
    llist2 = LinkedList()
    # swap the 2 nodes 
    llist.push(6) 
    llist.push(4) 
    llist.push(3) 
    llist.push(2) 
    llist.push(1) 
    llist2.push(8) 
    llist2.push(6) 
    llist2.push(4) 
    llist2.push(2)
    print ("Linked List before moving last to front ") 
    llist.printList() 
    print ("Linked List before moving last to front ") 
    llist2.printList() 
    i = Intersect()
    s = i.Intersect(llist,llist2)
    newlist = LinkedList()
    for i in s:
        newlist.push(i)
    print ("newlist") 
    newlist.printList() 
