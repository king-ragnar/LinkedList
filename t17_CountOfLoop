class Node: 
     
    def __init__(self, val): 
        self.val = val 
        self.next = None
      
class LinkedList: 
      
    # Function to initialize the  
    # head of the linked list 
    def __init__(self): 
        self.head = None        
          
    # Function to insert a new  
    # node at the end  
    def AddNode(self, val): 
        if self.head is None: 
            self.head = Node(val) 
        else: 
            curr = self.head 
            while(curr.next): 
                curr = curr.next
            curr.next = Node(val) 
      
    def CreateLoop(self, n): 
          
        LoopNode = self.head 
        for _ in range(1, n): 
            LoopNode = LoopNode.next
              
        end = self.head 
        while(end.next): 
            end = end.next
              
        end.next = LoopNode 
          
    def detectLoop(self): 
          
        s = set()
        temp = self.head
        
        while(temp):
            if temp.val not in s:
                s.add(temp.val)
            else:
                count = 1
                temp1 = temp 
                while temp1.next.val !=temp.val:  #we have found that cycle exist so we move from that cycle next node till cycle node
                    count+=1
                return count 
            temp = temp.next
        return 0 
        
# Setting up the code 
# Making a Linked List and adding the nodes 
myLL = LinkedList() 
myLL.AddNode(1) 
myLL.AddNode(2) 
myLL.AddNode(3) 
myLL.AddNode(4) 
myLL.AddNode(5) 
  
# Creating a loop in the linked List 
# Loop is created by connecting the  
# last node of linked list to n^th node 
# 1<= n <= len(LinkedList) 
myLL.CreateLoop(2) 
  
# Checking for Loop in the Linked List  
# and printing the length of the loop 
loopLength = myLL.detectLoop() 
print(loopLength)
